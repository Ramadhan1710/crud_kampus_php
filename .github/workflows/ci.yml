name: CI/CD PHP Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Ambil kode dari repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file from GitHub Secrets
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env

      # 2️⃣ Pastikan Docker Compose tersedia
      - name: Check Docker Compose version
        run: docker-compose version || docker compose version

      # 3️⃣ Build dan jalankan container Docker
      - name: Build and start containers
        run: docker compose up -d --build

      # 4️⃣ Tunggu MySQL siap
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          sleep 20

      # 5️⃣ Tampilkan container yang berjalan (debug)
      - name: List running containers
        run: docker ps -a

      # 6️⃣ Cek apakah container PHP hidup
      - name: Check PHP container
        run: docker exec php_web php -v

      # 7️⃣ Tes koneksi PHP ke MySQL (pakai Secrets)
      - name: Check MySQL connection
        run: docker exec php_web php -r "mysqli_connect(getenv('DB_HOST'), getenv('DB_USER'), getenv('DB_PASS'), getenv('DB_NAME')) or die('MySQL connection failed'); echo 'MySQL connected successfully';"


      # 8️⃣ Matikan container & bersihkan resource
      - name: Stop containers
        if: always()
        run: docker compose down -v
