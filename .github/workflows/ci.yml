name: CI/CD PHP Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      container_name: php_web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-

      - name: Build Docker containers with cache
        run: |
          docker buildx build \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            -f Dockerfile \
            -t php_web:latest \
            .

      - name: Build Docker containers
        run: docker compose build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env from GitHub Secrets
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env

      - name: Start containers
        run: docker compose up -d

      # - name: Wait for MySQL dynamically
      #   run: |
      #     echo "Waiting for MySQL..."
      #     for i in {1..12}; do
      #       if docker exec php_web php -r "mysqli_connect(getenv('DB_HOST'), getenv('DB_USER'), getenv('DB_PASS'), getenv('DB_NAME'));" 2>/dev/null; then
      #         echo "MySQL ready!"
      #         break
      #       fi
      #       echo "Waiting 5s..."
      #       sleep 5
      #     done

      - name: Wait for MySQL dynamically
        run: |
          echo "Waiting for MySQL..."
          for i in {1..12}; do
            # Coba connect MySQL dari PHP, tapi error tidak ditampilkan
            docker exec php_web php -r "
              try {
                \$conn = mysqli_connect(getenv('DB_HOST'), getenv('DB_USER'), getenv('DB_PASS'), getenv('DB_NAME'));
              } catch (Exception \$e) {}
              if (\$conn) { exit(0); } else { exit(1); }
            " >/dev/null 2>&1

            # Jika exit code 0 → MySQL siap
            if [ $? -eq 0 ]; then
              echo "MySQL ready!"
              break
            fi

            # Belum siap → tunggu 5 detik
            echo "Waiting 5s..."
            sleep 5
          done


      - name: Check PHP container
        run: docker exec php_web php -v

      - name: Check MySQL connection
        run: docker exec php_web php -r "mysqli_connect(getenv('DB_HOST'), getenv('DB_USER'), getenv('DB_PASS'), getenv('DB_NAME')) or die('MySQL connection failed'); echo 'MySQL connected successfully';"

      - name: Stop containers (cleanup)
        if: always()
        run: docker compose down -v
